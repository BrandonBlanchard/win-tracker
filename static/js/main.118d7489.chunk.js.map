{"version":3,"sources":["logo.svg","classes/fetch-data.js","header.js","player-faction-chart.js","win-rate.js","classes/extractors.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","formatData","data","dataReadyCB","lines","split","formattedData","i","length","line","reduce","acc","col","undefined","push","player","faction","caster","theme","opponent","opponentFaction","opponentTheme","opponentCaster","outcome","winCondition","controlPoints","opponentControlPoints","Header","react_default","a","createElement","className","PlayerFactionChart","props","react_plotly_default","Object","assign","layout","paper_bgcolor","plot_bgcolor","width","height","grid","rows","columns","showlegend","WinRate","factionReducer","row","extractFactions","type","labels","keys","values","domain","column","hole","textinfo","LOAD_STATE","INIT","LOADING","READY","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","readiness","factions","winRates","_this2","setState","fetch","then","text","catch","e","console","error","_this3","header_Header","win_rate_WinRate","player_faction_chart_PlayerFactionChart","PivotTableUI_default","onChange","s","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.118d7489.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { stringify } from \"querystring\";\r\n\r\n\r\nconst fetchData = (url, dataReadyCB) => {\r\n     fetch(url).then(data => {\r\n        data.text().then(data => formatData(data, dataReadyCB));\r\n     }).catch(e => console.error('data fetch failed')) };\r\n\r\nconst formatData = (data, dataReadyCB) => {\r\n   const lines = data.split('\\n');\r\n   const formattedData = [];\r\n\r\n   for(let i = 0; i < lines.length; i++) {\r\n      const line = lines[i].split(',');\r\n\r\n      let emptyCols = line.reduce((acc, col) => {\r\n         if(col === '' || col === null || col === undefined) { acc += 1;}\r\n         return acc;          \r\n      }, 0);\r\n\r\n      if(emptyCols > 4) {\r\n         continue;\r\n      }\r\n\r\n      if(i > 0) {\r\n         formattedData.push({\r\n            player: line[0],\r\n            faction: line[1],\r\n            caster: line[2],\r\n            theme: line[3],\r\n            opponent: line[4],\r\n            opponentFaction: line[5],\r\n            opponentTheme: line[6],\r\n            opponentCaster: line[7],\r\n            outcome: line[8] ? 'win' : 'lose',\r\n            winCondition: line[9],\r\n            controlPoints: line[10],\r\n            opponentControlPoints: line[11]\r\n         });\r\n\r\n         formattedData.push({\r\n            player: line[4],\r\n            faction: line[5],\r\n            caster: line[7],\r\n            theme: line[6],\r\n            opponent: line[0],\r\n            opponentFaction: line[1],\r\n            opponentTheme: line[3],\r\n            opponentCaster: line[2],\r\n            outcome: !line[8] ? 'win' : 'lose',\r\n            winCondition: line[9],\r\n            controlPoints: line[11],\r\n            opponentControlPoints: line[10]\r\n         });\r\n      }\r\n   }\r\n\r\n   dataReadyCB(formattedData);\r\n}\r\n\r\n\r\nexport { fetchData }","import React from 'react';\r\n\r\nconst Header = () => (\r\n    <div className=\"header\">\r\n        <h1>Turn 2 <br/>\r\n            Smoke <br/>\r\n             Break</h1>\r\n    </div>\r\n);\r\n\r\nexport { Header };","import React from 'react';\r\nimport Plot from 'react-plotly.js';\r\n\r\nconst PlayerFactionChart = (props) => (\r\n    <div className='player-faction'>\r\n        <Plot {...props} layout={{ paper_bgcolor: 'rgba(0,0,0,0)', plot_bgcolor: 'rgba(0,0,0,0)', width: props.width, height: props.height, grid: { rows: 0, columns: 0}, showlegend: false }}></Plot>\r\n    </div>\r\n);\r\n\r\nexport {\r\n    PlayerFactionChart\r\n}\r\n","import React from 'react';\r\n\r\nconst WinRate = () => (\r\n    <div className='win-rate'>\r\n\r\n    </div>\r\n);\r\n\r\nexport  { WinRate }","\r\nconst objToArray = (data) => {\r\n    return [{\r\n        type: 'pie',\r\n        labels: Object.keys(data),\r\n        values: Object.values(data),\r\n        domain: { column: 0 },\r\n        hole: .4,   \r\n        textinfo: 'label+percent'\r\n    }];\r\n};\r\n\r\nconst factionReducer = (acc, row) =>  { \r\n    row.faction in acc ? acc[row.faction] += 1 : acc[row.faction] = 1;\r\n    return acc;\r\n}\r\n\r\nconst extractFactions = (rows) => objToArray(rows.reduce(factionReducer, {}));\r\n\r\nexport {\r\n    extractFactions\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {fetchData} from './classes/fetch-data';\nimport PivotTableUI from 'react-pivottable/PivotTableUI';\nimport 'react-pivottable/pivottable.css';\nimport { Header } from './header';\nimport { PlayerFactionChart } from './player-faction-chart';\nimport { WinRate } from './win-rate';\nimport {extractorFactions, extractFactions} from './classes/extractors';\n\nconst dataSource = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQ6B-jLNFVOaHlagYjsClKUDGquAkZpCymnDQ60n5wOw-0pf8gRImDXKciW7FzLZbK4rZutfQjPfVSM/pub?output=csv';\n\nconst LOAD_STATE = {\n  INIT: 0,\n  LOADING: 1,\n  READY: 2\n};\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      readiness: LOAD_STATE.INIT,\n      data: null,\n      factions: [],\n      winRates: []\n    };\n  }\n\n  componentDidMount () {\n    if(this.state.readiness === LOAD_STATE.INIT) {\n      fetchData(dataSource, (data) => {\n        this.setState({\n          readiness: LOAD_STATE.READY, \n          data,\n          factions: extractFactions(data)\n        });\n      });\n\n      this.setState({readiness: LOAD_STATE.LOADING});\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Header></Header>\n        <div className='sub-header'>\n        { this.state.readiness === LOAD_STATE.READY && \n          <WinRate></WinRate> }\n        { this.state.readiness === LOAD_STATE.READY && \n          <PlayerFactionChart data={this.state.factions} width={550} height={450} ></PlayerFactionChart>}\n        </div>\n        <div className=\"content\">\n          <h3 className=\"content-header\">Game Data</h3>\n\n          { this.state.readiness === LOAD_STATE.READY && <PivotTableUI {...this.state} onChange={s => this.setState(s)}/>}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Data source\n// https://docs.google.com/spreadsheets/d/e/2PACX-1vQ6B-jLNFVOaHlagYjsClKUDGquAkZpCymnDQ60n5wOw-0pf8gRImDXKciW7FzLZbK4rZutfQjPfVSM/pub?gid=0&single=true&output=csv\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["classes/fetch-data.js","components/welcome-mat/welcome-mat.js","actions/index.js","components/chart-widget/chart-card.jsx","components/pie-chart/pie-chart.jsx","components/mini-leaderboard/mini-leaderboard.jsx","components/section-meta/section-meta.jsx","App.js","serviceWorker.js","reducers/data-load.js","reducers/index.js","index.js"],"names":["formatData","data","dataReadyCB","lines","split","colNames","shift","map","ln","reduce","acc","val","index","toLowerCase","WelcomeMat","react_default","a","createElement","className","ACTION_TYPE","Object","freeze","DATA_LOAD","chart_widget_chart_card","props","chartName","children","PieChart","style","width","height","react_plotly_default","assign","configuration","displayModBar","layout","objectSpread","paper_bgcolor","plot_bgcolor","grid","rows","columns","showlegend","byWins","b","aWins","wins","bWins","onWins","player","numberStringMap","2","3","4","5","6","MiniLeaderboard","_extractPlayers","players","sortedPlayers","filter","sort","leader","rabble","slice","length","extractPlayers","leaderStats","label","stat","games","toFixed","faction","set","_ref","i","font","color","family","section_meta_section_meta","_props$data","factions","_useState","useState","_useState2","slicedToArray","factionChart","setFactionChart","_useState3","_useState4","playerChart","setPlayerChart","useEffect","factionEntries","trimmedFactions","item","type","labels","entry","values","domain","column","hole","textinfo","computeFactionChart","playerEntries","trimmerPlayers","computePlayerChart","key","pie_chart_pie_chart","mini_leaderboard_MiniLeaderboard","LOAD_STATE","INIT","LOADING","READY","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","readiness","url","_this2","rawData","dispatch","payload","dataLoad","fetch","then","text","catch","e","console","error","setState","log","welcome_mat_WelcomeMat","renderOnReady","Component","defaultProps","applicationEntry","connect","Boolean","window","location","hostname","match","playerReducer","game","playerDidWin","win","has","opponent","factionReducer","factionDidWin","dataLoadReducer","prevState","action","toConsumableArray","initialState","rootReducer","arguments","undefined","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2674bf59.chunk.js","sourcesContent":["import { stringify } from \"querystring\";\r\n\r\n\r\nconst fetchData = (url, dataReadyCB) => {\r\n     return fetch(url).then(data => {\r\n        data.text().then(data => formatData(data, dataReadyCB));\r\n     }).catch(e => console.error('data fetch failed')) };\r\n\r\nconst formatData = (data, dataReadyCB) => {\r\n   const lines = data.split('\\n');\r\n\r\n   // Take first row and split it into colmnNames\r\n   const colNames = lines.shift().split(',');\r\n   // Map line values to column names \r\n   dataReadyCB(lines.map(ln => \r\n      ln.split(',').reduce((acc, val, index) => {\r\n         acc[colNames[index].toLowerCase()] = val;\r\n         return acc;\r\n      }, {})\r\n   ));\r\n\r\n}\r\n\r\n\r\nexport { fetchData }","import React from 'react';\r\nimport './index.css';\r\n\r\nexport const WelcomeMat = () => {\r\n\r\n    return (\r\n        <div className=\"welcome-mat\">\r\n            <h1 className=\"welcome-mat__header-1\">Turn  <br/> Two </h1>\r\n            <h1 className=\"welcome-mat__header-2\">Smoke <br/> Break</h1>\r\n        </div>\r\n    );\r\n}\r\n","// Action Types\r\nconst ACTION_TYPE = Object.freeze({\r\n    DATA_LOAD: 'DATA_LOAD'\r\n});\r\n\r\n// Actions\r\nconst dataLoad = (rawData) => {\r\n    return { type: ACTION_TYPE.DATA_LOAD, payload: rawData }\r\n}\r\n\r\nexport {ACTION_TYPE, dataLoad}","import React from 'react';\r\nimport './chart-card.css';\r\n\r\nexport default function (props) {\r\n    return (\r\n        <div className=\"chart-card\">\r\n            <div className=\"chart-card__content\">\r\n                <h3 className=\"chart-card__name\">{props.chartName}</h3>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport Plot from 'react-plotly.js';\r\nimport './pie-chart.css';\r\n\r\nconst PieChart = (props) => (\r\n    <div className=\"pie-chart\" style={{width: props.width, height: props.height }}>\r\n        <Plot {...props} \r\n        configuration={{displayModBar: false }}\r\n        layout={{ ...props.layout, paper_bgcolor: 'rgba(0,0,0,0)', plot_bgcolor: 'rgba(0,0,0,0)', width: props.width, height: props.height, grid: { rows: 0, columns: 0}, showlegend: false }}></Plot>\r\n    </div>\r\n);\r\n\r\nexport default PieChart;","import React, { useState, useEffect } from 'react';\r\nimport './mini-leaderboard.css';\r\n\r\n\r\nconst byWins = (a, b) => {\r\n    const aWins = a.wins;\r\n    const bWins = b.wins;\r\n\r\n    if(aWins > bWins) return -1;\r\n    if(aWins < bWins) return 1;\r\n    return 0;\r\n};\r\n\r\n\r\nconst onWins = (player) => player.wins > 2 && player.player != 'Some rando'; \r\n\r\n\r\nconst extractPlayers = (players) => {\r\n    const sortedPlayers = players.filter(onWins)\r\n                                 .sort(byWins);\r\n\r\n    const leader = sortedPlayers[0];\r\n    const rabble = sortedPlayers.slice(1, sortedPlayers.length);\r\n    \r\n    return {leader, rabble};\r\n};\r\n\r\nconst numberStringMap = {\r\n    2: '2nd',\r\n    3: '3rd',\r\n    4: '4th',\r\n    5: '5th',\r\n    6: '6th'\r\n}\r\n\r\nexport const MiniLeaderboard = (props) => {\r\n    const {leader, rabble} = extractPlayers(props.players); \r\n    const leaderStats = [\r\n        { label: 'Wins', stat: leader.wins },\r\n        { label: 'W/L Ratio', stat: (leader.wins/leader.games).toFixed(2)},\r\n        { label: 'Games', stat: leader.games}\r\n    ];\r\n\r\n    return (\r\n        <ul className='mini-leaderboard'>\r\n            <li className='mini-leaderboard__leader'>\r\n                <i className='fa fa-crown mini-leaderboard__leader-crown'></i>\r\n                <p className='mini-leaderboard__leader-name'>{ leader.player }</p>\r\n                <p className='mini-leaderboard__leader-faction'>{ leader.faction }</p>\r\n                <div className='mini-leaderboard__leader-stats'>\r\n                    {\r\n                        leaderStats.map(set => (\r\n                            <div className='mini-leaderboard__leader-stat'>\r\n                                <p className='leader-stat__label'>{set.label}</p>\r\n                                <p className='leader-stat__value'>{set.stat}</p>\r\n                            </div>\r\n                        ))\r\n      \r\n                    }\r\n                    \r\n                  \r\n                </div>\r\n            </li>\r\n            {\r\n                rabble.map( ({ player, faction, wins, games}, i) => (\r\n                    <li className='mini-leaderboard__player'>\r\n                        <div className='mini-leaderboard__player-dot'> { player } </div>\r\n                        <div className='mini-leaderboard__player-faction'>{ faction }</div>\r\n                        <div className=\"mini-leaderboard__player-wins\">{numberStringMap[i + 2]}</div>\r\n                    </li>\r\n                ))\r\n            }\r\n        </ul>\r\n    )   ;\r\n};\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { ChartCard } from '../chart-widget';\r\nimport { PieChart } from './../pie-chart';\r\nimport { MiniLeaderboard } from './../mini-leaderboard';\r\nimport './index.css';\r\n\r\nconst layout = {\r\n  font: {\r\n    color: '#728041',\r\n    family: 'sans serif'\r\n  }\r\n};\r\n\r\n// Faction Games\r\nconst computeFactionChart = (factionEntries, setFactionChart) => {\r\n    const trimmedFactions = factionEntries.filter( item => (item.wins > 2));\r\n\r\n    const factionNames = trimmedFactions.map(entry => entry.faction);\r\n    const factionWins = trimmedFactions.map(entry => entry.games);\r\n\r\n    setFactionChart([{\r\n      type: 'pie',\r\n      labels: factionNames,\r\n      values: factionWins,\r\n      domain: { column: 0 },\r\n      hole: .96,   \r\n      textinfo: 'label+value',\r\n    }]);\r\n};\r\n\r\n// Player wins\r\nconst computePlayerChart = (playerEntries, setPlayerChart) => {\r\n  // Filter out players with only 1 or 2 games and any randos\r\n  const trimmerPlayers = playerEntries.filter( player => (player.games > 2) && player.player !== 'Some rando');\r\n\r\n  const playerNames = trimmerPlayers.map(player => player.player);\r\n  const playerWins = trimmerPlayers.map(player => player.wins);\r\n\r\n  setPlayerChart([{\r\n    type: 'pie',\r\n    labels: playerNames,\r\n    values: playerWins,\r\n    domain: {column: 1},\r\n    hole: 0.96,\r\n    textinfo: 'label+value'\r\n  }])\r\n}\r\n\r\nexport default (props) => {\r\n  const { factions, players } = props.data;\r\n\r\n  const [factionChart, setFactionChart] = useState([]);\r\n  const [playerChart, setPlayerChart] = useState([]);\r\n  const chartSize = 330;\r\n\r\n  useEffect(() => computeFactionChart(factions, setFactionChart), [factions]);\r\n  useEffect(() => computePlayerChart(players, setPlayerChart), [players]);\r\n\r\n  return (\r\n    <div className='meta-stats'>\r\n      <ChartCard chartName=\"Faction Games\" key={0}>\r\n        <PieChart data={factionChart} layout={layout} width={chartSize} height={chartSize} ></PieChart>\r\n      </ChartCard>\r\n\r\n      <MiniLeaderboard players={players}></MiniLeaderboard>\r\n\r\n      <ChartCard chartName=\"Player Wins\" key={0}>\r\n        <PieChart data={playerChart} layout={layout} width={chartSize} height={chartSize} ></PieChart>\r\n      </ChartCard>\r\n    </div>\r\n  );\r\n}","import React, { Component} from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nimport { fetchData } from './classes/fetch-data';\nimport 'react-pivottable/pivottable.css';\nimport { WelcomeMat } from './components/welcome-mat/welcome-mat';\nimport { dataLoad } from './actions/index';\nimport { SectionMeta } from './components/section-meta';\n\n\nconst dataSource = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQ6B-jLNFVOaHlagYjsClKUDGquAkZpCymnDQ60n5wOw-0pf8gRImDXKciW7FzLZbK4rZutfQjPfVSM/pub?output=csv';\n\n\nconst LOAD_STATE = {\n  INIT: 0,\n  LOADING: 1,\n  READY: 2\n};\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      readiness: LOAD_STATE.INIT,\n    };\n  }\n\n\n  componentDidMount() {\n    if (this.state.readiness === LOAD_STATE.INIT) {\n\n      fetchData(dataSource, (rawData) => {\n        this.props.dispatch(dataLoad(rawData));\n\n      }).then(() => { \n        this.setState({ readiness: LOAD_STATE.READY });\n      });\n\n      this.setState({ readiness: LOAD_STATE.LOADING });\n    }\n  }\n\n\n  renderOnReady() {\n    return (\n      <div className='charts-container'>\n        <SectionMeta {...this.props} />\n      </div>\n    );\n  }\n\n\n  render() {\n    console.log(this.props)\n    return (\n      <div className=\"app\">\n        <WelcomeMat/>\n        {this.props.data.players.length > 0 && this.renderOnReady()}\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  data: PropTypes.objectOf(PropTypes.array)\n};\n\nApp.defaultProps = {\n  data: {\n    players: []\n  }\n}\n\nconst mapStateToProps = state => state;\n\n\nconst applicationEntry = connect(mapStateToProps)(App);\n\n\nexport default applicationEntry;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import has from 'lodash/has';\r\n\r\nconst OPPONENT_FACTION = \"opponent faction\";\r\n\r\nconst playerReducer = (acc, game) => {\r\n    const playerDidWin = game.win === \"TRUE\";\r\n    \r\n    // DRY ?\r\n    if(has(acc, game.player)) {\r\n        acc[game.player].games += 1;\r\n        acc[game.player].wins += playerDidWin ? 1 : 0;\r\n    } else {\r\n        acc[game.player] = {\r\n            games: 1,\r\n            wins: playerDidWin ? 1 : 0,\r\n            player: game.player,\r\n            faction: game.faction\r\n        }\r\n    }\r\n\r\n    if(has(acc, game.opponent)) {\r\n        acc[game.opponent].games += 1;\r\n        acc[game.opponent].wins += !playerDidWin ? 1 : 0;\r\n    } else {\r\n        acc[game.opponent] = {\r\n            games: 1,\r\n            wins: !playerDidWin ? 1 : 0,\r\n            player: game.opponent,\r\n            faction: game[OPPONENT_FACTION]\r\n        }\r\n    }\r\n\r\n    return acc;\r\n}\r\n\r\nconst factionReducer = (acc, game) => {\r\n    const factionDidWin = game.win === \"TRUE\";\r\n\r\n    if(has(acc, game.faction)) {\r\n        acc[game.faction].wins += factionDidWin ? 1 : 0;\r\n        acc[game.faction].games += 1;\r\n    } else {\r\n        acc[game.faction] = {\r\n            faction: game.faction,\r\n            wins: factionDidWin ? 1 : 0,\r\n            games: 1\r\n        };\r\n    }\r\n\r\n    if(has(acc, game[OPPONENT_FACTION])) {\r\n        acc[game[OPPONENT_FACTION]].wins += !factionDidWin ? 1 : 0;\r\n        acc[game[OPPONENT_FACTION]].games += 1;\r\n    } else {\r\n        acc[game[OPPONENT_FACTION]] = {\r\n            faction: game[OPPONENT_FACTION],\r\n            wins: !factionDidWin ? 1 : 0,\r\n            games: 1\r\n        };\r\n    }\r\n\r\n    return acc;\r\n}\r\n\r\nconst dataLoadReducer = (prevState, action) => {\r\n    console.log('data load reducer', prevState, action);\r\n\r\n    return {\r\n        players: [ ...Object.values(action.payload.reduce(playerReducer, {}))],\r\n        factions: [...Object.values(action.payload.reduce(factionReducer, {}))]\r\n    }\r\n};\r\n\r\n\r\nexport default dataLoadReducer;","import { ACTION_TYPE } from './../actions/index';\r\nimport dataLoadReducer from './data-load';\r\n\r\nconst initialState = {\r\n    data: {\r\n        // { player: 'brandon', wins: 20, games: 30, }\r\n        players:[],\r\n        // { faction: 'crucible guard', wins: 20, games: 30 }\r\n        factions: [],\r\n    }\r\n}\r\n\r\nconst rootReducer = (prevState = initialState, action) => {\r\n    console.log(action, ACTION_TYPE.DATA_LOAD)\r\n    return {\r\n        data: action.type === ACTION_TYPE.DATA_LOAD ? Object.assign({}, prevState.data, dataLoadReducer(prevState, action)) : Object.assign({}, prevState.data), \r\n    }\r\n};\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/index';\n\n// Data source\n// https://docs.google.com/spreadsheets/d/e/2PACX-1vQ6B-jLNFVOaHlagYjsClKUDGquAkZpCymnDQ60n5wOw-0pf8gRImDXKciW7FzLZbK4rZutfQjPfVSM/pub?gid=0&single=true&output=csv\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
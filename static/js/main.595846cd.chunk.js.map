{"version":3,"sources":["logo.svg","classes/fetch-data.js","header.js","player-faction-chart.js","classes/extractors.js","chart-widget.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","formatData","data","dataReadyCB","lines","split","colNames","shift","map","ln","reduce","acc","val","index","Header","react_default","a","createElement","className","PieChart","props","style","width","height","react_plotly_default","Object","assign","configuration","displayModBar","layout","paper_bgcolor","plot_bgcolor","grid","rows","columns","showlegend","objToArray","type","labels","keys","values","domain","column","hole","textinfo","factionReducer","row","faction","factionWinReducer","win","extractFactionWins","src_chart_widget","chartName","children","LOAD_STATE","INIT","LOADING","READY","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","readiness","factions","factionWins","_this2","setState","fetch","then","text","catch","e","console","error","key","player_faction_chart_PieChart","_this3","header_Header","renderOnReady","PivotTableUI_default","onChange","s","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.595846cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { stringify } from \"querystring\";\r\n\r\n\r\nconst fetchData = (url, dataReadyCB) => {\r\n     fetch(url).then(data => {\r\n        data.text().then(data => formatData(data, dataReadyCB));\r\n     }).catch(e => console.error('data fetch failed')) };\r\n\r\nconst formatData = (data, dataReadyCB) => {\r\n   const lines = data.split('\\n');\r\n\r\n   // Take first row and split it into colmnNames\r\n   const colNames = lines.shift().split(',');\r\n   // Map line values to column names \r\n   dataReadyCB(lines.map(ln => \r\n      ln.split(',').reduce((acc, val, index) => {\r\n         acc[colNames[index]] = val;\r\n         return acc;\r\n      }, {})\r\n   ));\r\n\r\n}\r\n\r\n\r\nexport { fetchData }","import React from 'react';\r\n\r\nconst Header = () => (\r\n    <div className=\"header\">\r\n        <h1>Turn 2 </h1>\r\n        <h1>Smoke Break</h1>\r\n    </div>\r\n);\r\n\r\nexport { Header };","import React from 'react';\r\nimport Plot from 'react-plotly.js';\r\n\r\nimport './styles/player-faction-chart.css';\r\n\r\nconst PieChart = (props) => (\r\n    <div className=\"pie-chart\" style={{width: props.width, height: props.height }}>\r\n        <Plot {...props} \r\n        configuration={{displayModBar: false }}\r\n        layout={{ paper_bgcolor: 'rgba(0,0,0,0)', plot_bgcolor: 'rgba(0,0,0,0)', width: props.width, height: props.height, grid: { rows: 0, columns: 0}, showlegend: false }}></Plot>\r\n    </div>\r\n);\r\n\r\nexport {\r\n    PieChart\r\n}\r\n","\r\nconst objToArray = (data) => {\r\n    return [{\r\n        type: 'pie',\r\n        labels: Object.keys(data),\r\n        values: Object.values(data),\r\n        domain: { column: 0 },\r\n        hole: .96,   \r\n        textinfo: 'label+percent'\r\n    }];\r\n};\r\n\r\nconst factionReducer = (acc, row) =>  { \r\n    const opponentFaction = \"opponent faction\";\r\n\r\n    row.faction in acc ? acc[row.faction] += 1 : acc[row.faction] = 1;\r\n    opponentFaction in acc ? acc[row[\"opponent faction\"]] +=1 : acc[row[\"opponent faction\"]] = 1;\r\n\r\n    return acc;\r\n}\r\n\r\nconst factionWinReducer = (acc, row) => {\r\n    const faction = row.win == \"TRUE\" ? row[\"faction\"] : row[\"opponent faction\"];\r\n    acc[faction] ? acc[faction] += 1 : acc[faction] = 1;\r\n\r\n    return acc;\r\n}\r\n\r\n\r\nconst extractFactions = (rows) => objToArray(rows.reduce(factionReducer, {}));\r\n\r\nconst extractFactionWins = (rows) => objToArray(rows.reduce(factionWinReducer, {}));    \r\n\r\n\r\nexport {\r\n    extractFactions,\r\n    extractFactionWins\r\n}","import React from 'react';\r\nimport './styles/chart-widget.css';\r\n\r\nexport default function (props) {\r\n    return (\r\n        <div className=\"chart-widget\">\r\n            <h3 className=\"chart-widget__name\">{props.chartName}</h3>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { fetchData } from './classes/fetch-data';\nimport PivotTableUI from 'react-pivottable/PivotTableUI';\nimport 'react-pivottable/pivottable.css';\nimport { Header } from './header';\nimport { PieChart } from './player-faction-chart';\nimport { WinRate } from './win-rate';\nimport { extractFactions, extractFactionWins } from './classes/extractors';\nimport ChartWidget from './chart-widget';\n\nconst dataSource = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQ6B-jLNFVOaHlagYjsClKUDGquAkZpCymnDQ60n5wOw-0pf8gRImDXKciW7FzLZbK4rZutfQjPfVSM/pub?output=csv';\n\nconst LOAD_STATE = {\n  INIT: 0,\n  LOADING: 1,\n  READY: 2\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      readiness: LOAD_STATE.INIT,\n      data: null,\n      factions: [],\n      factionWins: []\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.readiness === LOAD_STATE.INIT) {\n      fetchData(dataSource, (data) => {\n        this.setState({\n          readiness: LOAD_STATE.READY,\n          data,\n          factions: extractFactions(data),\n          factionWins: extractFactionWins(data)\n        });\n      });\n\n      this.setState({ readiness: LOAD_STATE.LOADING });\n    }\n  }\n\n  renderOnReady() {\n    return (\n      <div className='charts-container'>\n        <ChartWidget chartName=\"Games by Faction\" key={0}>\n          <PieChart data={this.state.factions} width={400} height={400} ></PieChart>\n        </ChartWidget>\n        <ChartWidget chartName=\"Wins by Faction\" key={1}>\n          <PieChart data={this.state.factionWins} width={400} height={400} ></PieChart>\n        </ChartWidget>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Header></Header>\n        {this.state.readiness === LOAD_STATE.READY && this.renderOnReady()}\n        <div className=\"content\">\n          <h3 className=\"content-header\">Game Data</h3>\n          {this.state.readiness === LOAD_STATE.READY && <PivotTableUI {...this.state} onChange={s => this.setState(s)} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Data source\n// https://docs.google.com/spreadsheets/d/e/2PACX-1vQ6B-jLNFVOaHlagYjsClKUDGquAkZpCymnDQ60n5wOw-0pf8gRImDXKciW7FzLZbK4rZutfQjPfVSM/pub?gid=0&single=true&output=csv\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
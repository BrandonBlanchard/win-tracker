{"version":3,"sources":["logo.svg","classes/fetch-data.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","formatData","data","dataReadyCB","lines","split","formattedData","i","length","line","push","player","faction","caster","theme","opponent","opponentFaction","opponentTheme","opponentCaster","win","winCondition","controlPoints","opponentControlPoints","LOAD_STATE","INIT","LOADING","READY","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","readiness","_this2","setState","fetch","then","text","catch","e","console","error","_this3","react_default","a","createElement","className","PivotTableUI_default","assign","onChange","s","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8KCOlCC,eAAa,SAACC,EAAMC,GAIvB,IAHA,IAAMC,EAAQF,EAAKG,MAAM,MACnBC,EAAgB,GAEdC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAAK,CACnC,IAAME,EAAOL,EAAMG,GAAGF,MAAM,KACzBE,EAAI,IAEJD,EAAcI,KAAK,CAChBC,OAAQF,EAAK,GACbG,QAASH,EAAK,GACdI,OAAQJ,EAAK,GACbK,MAAOL,EAAK,GACZM,SAAUN,EAAK,GACfO,gBAAiBP,EAAK,GACtBQ,cAAeR,EAAK,GACpBS,eAAgBT,EAAK,GACrBU,IAAOV,EAAK,GAAK,MAAQ,OACzBW,aAAcX,EAAK,GACnBY,cAAeZ,EAAK,IACpBa,sBAAuBb,EAAK,MAG/BH,EAAcI,KAAK,CAChBC,OAAQF,EAAK,GACbG,QAASH,EAAK,GACdI,OAAQJ,EAAK,GACbK,MAAOL,EAAK,GACZM,SAAUN,EAAK,GACfO,gBAAiBP,EAAK,GACtBQ,cAAeR,EAAK,GACpBS,eAAgBT,EAAK,GACrBU,IAAMV,EAAK,GAAa,OAAR,MAChBW,aAAcX,EAAK,GACnBY,cAAeZ,EAAK,IACpBa,sBAAuBb,EAAK,OAKrCN,EAAYG,qBCrCTiB,SAAa,CACjBC,KAAM,EACNC,QAAS,EACTC,MAAO,IAqCMC,cAjCb,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,UAAWd,EAAWC,KACtBtB,KAAM,MALU2B,mFASC,IDxBC1B,ECwBDmC,EAAAN,KAChBA,KAAKI,MAAMC,YAAcd,EAAWC,ODzBnBrB,EC0BI,SAACD,GACrBoC,EAAKC,SAAS,CACZF,UAAWd,EAAWG,MACtBxB,UD5BLsC,MCKc,kJDLHC,KAAK,SAAAvC,GACbA,EAAKwC,OAAOD,KAAK,SAAAvC,GAAI,OAAID,EAAWC,EAAMC,OAC1CwC,MAAM,SAAAC,GAAC,OAAIC,QAAQC,MAAM,uBC8B3Bd,KAAKO,SAAS,CAACF,UAAWd,EAAWE,4CAIhC,IAAAsB,EAAAf,KACP,OACEgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBnB,KAAKI,MAAMC,YAAcd,EAAWG,OAASsB,EAAAC,EAAAC,cAACE,EAAAH,EAADnB,OAAAuB,OAAA,GAAkBrB,KAAKI,MAAvB,CAA8BkB,SAAU,SAAAC,GAAC,OAAIR,EAAKR,SAASgB,gBA3BhGC,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.30e756dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\n\r\nconst fetchData = (url, dataReadyCB) => {\r\n     fetch(url).then(data => {\r\n        data.text().then(data => formatData(data, dataReadyCB));\r\n     }).catch(e => console.error('data fetch failed')) };\r\n\r\nconst formatData = (data, dataReadyCB) => {\r\n   const lines = data.split('\\n');\r\n   const formattedData = [];\r\n\r\n   for(let i = 0; i < lines.length; i++) {\r\n      const line = lines[i].split(',');\r\n      if(i > 0) {\r\n\r\n         formattedData.push({\r\n            player: line[0],\r\n            faction: line[1],\r\n            caster: line[2],\r\n            theme: line[3],\r\n            opponent: line[4],\r\n            opponentFaction: line[5],\r\n            opponentTheme: line[6],\r\n            opponentCaster: line[7],\r\n            win: !!line[8] ? 'win' : 'lose',\r\n            winCondition: line[9],\r\n            controlPoints: line[10],\r\n            opponentControlPoints: line[11]\r\n         });\r\n\r\n         formattedData.push({\r\n            player: line[4],\r\n            faction: line[5],\r\n            caster: line[7],\r\n            theme: line[6],\r\n            opponent: line[0],\r\n            opponentFaction: line[1],\r\n            opponentTheme: line[3],\r\n            opponentCaster: line[2],\r\n            win: !line[8] ? 'win' : 'lose',\r\n            winCondition: line[9],\r\n            controlPoints: line[11],\r\n            opponentControlPoints: line[10]\r\n         });\r\n      }\r\n   }\r\n\r\n   dataReadyCB(formattedData);\r\n}\r\n\r\n\r\nexport { fetchData }","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {fetchData} from './classes/fetch-data';\nimport PivotTableUI from 'react-pivottable/PivotTableUI';\nimport 'react-pivottable/pivottable.css';\n\nconst dataSource = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQ6B-jLNFVOaHlagYjsClKUDGquAkZpCymnDQ60n5wOw-0pf8gRImDXKciW7FzLZbK4rZutfQjPfVSM/pub?output=csv';\n\nconst LOAD_STATE = {\n  INIT: 0,\n  LOADING: 1,\n  READY: 2\n};\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      readiness: LOAD_STATE.INIT,\n      data: null\n    };\n  }\n\n  componentDidMount () {\n    if(this.state.readiness === LOAD_STATE.INIT) {\n      fetchData(dataSource, (data) => {\n        this.setState({\n          readiness: LOAD_STATE.READY, \n          data\n        })\n      });\n\n      this.setState({readiness: LOAD_STATE.LOADING});\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        { this.state.readiness === LOAD_STATE.READY && <PivotTableUI {...this.state} onChange={s => this.setState(s)}/>}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Data source\n// https://docs.google.com/spreadsheets/d/e/2PACX-1vQ6B-jLNFVOaHlagYjsClKUDGquAkZpCymnDQ60n5wOw-0pf8gRImDXKciW7FzLZbK4rZutfQjPfVSM/pub?gid=0&single=true&output=csv\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}